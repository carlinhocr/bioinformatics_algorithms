class Bioinformatics(object):
    def __init__(self):
        pass
    def patterncount(self, text, pattern):
        count = 0
        for i in range(0,(len(text)-len(pattern))):
            print(i)
            print(len(pattern))
            subtext = text[i:len(pattern)+i]
            print(subtext)
            if subtext == pattern:
                count +=1
        print("It repeats",count)
        return count

    def frequencyTable(self, text="hola", k=0):
        freqMap = {}
        n = len(text)
        for i in range(0, n - k):
            pattern = text[i:k+i]
            print (pattern)
            if not pattern in freqMap:
                freqMap[pattern]=1
            else:
                freqMap[pattern] += 1
        return freqMap

    def MaxMap(self,freqMap):
        maximum = 0
        for element in freqMap:
            #print(element + " " + str(freqMap[element]))
            if abs(freqMap[element]) > maximum:
                maximum = abs(freqMap[element])
        return maximum

    def BetterFrequentWords(self,text,k):
        frequentPatterns = []
        freqMap = self.frequencyTable(text,k)
        max = self.MaxMap(freqMap)
        for pattern in freqMap:
            # the patern is the key in the dictionary, the value it is how often it is found in text
            if freqMap[pattern] == max:
                frequentPatterns.append(pattern)
        return frequentPatterns




def main():

    bio = Bioinformatics()
    #text = "AAATTAGAGTACCAAATTAGAAATTAGAACAAATTAGTCAGGAGTCGTTTGTTCGAAAATTAGCTAAATTAGATTTCAAATTAGAAATTAGGAAATTAGTCAAATTAGGGAAATTAGCCAAAAATTAGAAAATTAGAAATTAGAGAAATTAGAAAAATTAGAGATAATTAGAAATTAGCGTGGCAAATTAGGAAATTAGAAATTAGATTCTAAATTAGAAATTAGGAAATTAGAAATTAGATGAAATTAGTAAATTAGCAAATTAGGAAATTAGAAATTAGAAATTAGAAATTAGCGTATAAATTAGGAAATTAGTTATATGAGAAATTAGCCACAGTAAAATTAGCGAAATTAGGAAATTAGACAAGCTTGACGCGCAAATTAGTTAAATTAGAATAAAATTAGGTGCTCTGAAGTGCACTAAATTAGTGAAAAATTAGGAGAAATTAGGAAAATTAGTAAATTAGCAAATTAGGGCAAATTAGAAATTAGATCTGCTAAATTAGTAACCAAATTAGAAATTAGCAACAAATTAGAAATTAGTAAATTAGTATCGTTAAATTAGAAATTAGTTAAATTAGCAAATTAGGACTAAATTAGATCGTAAAATTAGCAAATTAGCAAATTAGGCGATATAAATTAGAAATTAGATAAATTAGATAAAATTAGTTAAATTAGTAAATTAGATCAAATTAGGACCAAATTAGTGAAATTAGGGAAAATTAGCCATTAAATTAGTTGAAATTAGGTAAATTAGTAAAAATTAGCAAATTAGGGTAGATTGGAAATTAGGTAAATTAGAGACCGCCAAAATTAGGGTAAATTAGGTAGAAATTAGTAAAATTAGGCATGAAATTAGAGATAAATTAGTAAAAATTAGCCGAAATTAGAAAATTAGCAAATTAGAAATTAGGTGCCAAAATTAGATGGATAAATTAGAAATTAGTGTAAATTAGGAAATTAGAAATTAGAAATTAGTCTGAAAATTAGAGAAATTAGTCGATTAAAATTAGAAATTAGTTGTGGTCAAATTAGAAATTAG"
    #pattern = "AAATTAGAA"
    #count = bio.patterncount(text,pattern)
    #print(bio.frequencyTable(text, 3))
    text = "TCTATGGATCTGTCTACATACCTCACTGATATCATACCTCATACCTTCTATGGATCTGTCTATCTATGGATCTGTCTATCTATGGATTGGACGGTGCACTGATATTCTATGGATCTGTCTATGGACGGTGCATACCTTGGACGGTGCACTGATATCATACCTCTGTCTATCTATGGATCTGTCTATGGACGGTGTGGACGGTGTCTATGGATTGGACGGTGTCTATGGATCACTGATATCTGTCTATCTATGGATTCTATGGATCATACCTTGGACGGTGCTGTCTACTGTCTACACTGATATCATACCTCACTGATATTGGACGGTGCATACCTCTGTCTACACTGATATTGGACGGTGTGGACGGTGCACTGATATCTGTCTACACTGATATCACTGATATTCTATGGATCTGTCTACTGTCTATCTATGGATCATACCTCATACCTTCTATGGATCTGTCTACACTGATATCTGTCTACACTGATATCACTGATATTGGACGGTGCATACCTTCTATGGATCATACCTCACTGATATCATACCTTCTATGGATTGGACGGTGCACTGATATTGGACGGTGCATACCTCTGTCTATCTATGGATTCTATGGATCATACCTTCTATGGATCTGTCTACTGTCTATGGACGGTGCACTGATATTCTATGGATCTGTCTATGGACGGTGCACTGATATTCTATGGATCACTGATATTCTATGGATCACTGATATTCTATGGATCACTGATATTGGACGGTGTGGACGGTGCACTGATATCACTGATATCACTGATATCATACCTTCTATGGATCTGTCTATCTATGGATTGGACGGTGCATACCTTGGACGGTGCATACCTTCTATGGAT"
    k = 11

    print (bio.BetterFrequentWords(text, k))

if __name__ == "__main__":
    main()