


class Bioinformatics(object):
    def __init__(self):
        pass

    def patternCount(self, text, pattern):
        count = 0
        for i in range(0,(len(text)-len(pattern))+1):
            subtext = text[i:len(pattern)+i]
            if subtext == pattern:
                count +=1
        return count

    def frequencyTable(self, text="hola", k=0):
        freqMap = {}
        n = len(text)
        for i in range(0, n - k):
            pattern = text[i:k+i]
            if not pattern in freqMap:
                freqMap[pattern]=1
            else:
                freqMap[pattern] += 1
        return freqMap

    def MaxMap(self,freqMap):
        maximum = 0
        for element in freqMap:
            if abs(freqMap[element]) > maximum:
                maximum = abs(freqMap[element])
        return maximum

    def BetterFrequentWords(self,text,k):
        frequentPatterns = []
        freqMap = self.frequencyTable(text,k)
        max = self.MaxMap(freqMap)
        for pattern in freqMap:
            # the patern is the key in the dictionary, the value it is how often it is found in text
            if freqMap[pattern] == max:
                frequentPatterns.append(pattern)
        return frequentPatterns

# ==================================================================================================================

    def patternToNumber (self,pattern):
        if pattern == "":
            return_value = 0
        else:
            symbol = self.lastSymbol(pattern)
            prefix = self.prefix(pattern)
            return_value = 4 * self.patternToNumber(prefix) + self.symbolToNumber(symbol)
        return return_value

    def lastSymbol(self,pattern):
        return_value = pattern[-1]
        return return_value

    def prefix(self,pattern):
        if len(pattern)<=1:
            return_value = ""
        else:
            return_value = pattern[:-1]
        return return_value

    def symbolToNumber(self,symbol):
        if len(symbol) == 1:
            if symbol.upper() == "A":
                return_value = 0
            elif symbol.upper() == "C":
                return_value = 1
            elif symbol.upper() == "G":
                return_value = 2
            elif symbol.upper() == "T":
                return_value = 3
        else:
            return_value=5000000000
        return return_value

    def numberToSymbol(self,symbol):
        if symbol == 0:
            return_value = "A"
        elif symbol == 1:
            return_value = "C"
        elif symbol == 2:
            return_value = "G"
        elif symbol == 3:
            return_value = "T"
        else:
            return_value="FALLO ALGO "
        return return_value

    def numberToPattern(self,index,k):
        if k == 1:
            return_value = self.numberToSymbol(index)
        else:
            prefixIndex = index // 4 # modulo 4 quotient
            remainder = index % 4
            symbol = self.numberToSymbol(remainder)
            prefixPattern = self.numberToPattern(prefixIndex,k-1)
            return_value = prefixPattern + symbol
        return return_value

    def frequentWords(self,Text, k):
        words = []
        freq = self.frequencyMap(Text, k)
        m = max(freq.values())
        for key in freq:
            if freq[key] == m:
                words.append(key)
        return words

    def frequentWordsSorting(self,text,k):
        frequentPatterns = []
        patternRegular = []
        n = len(text)
        index = []
        count = []
        for i in range(n-k): #the plus one is because range does not include the last one
            pattern = text[i:i+k]
            patternRegular.append(pattern)
            index.append(self.patternToNumber(pattern))
            count.append(1)
        sortedIndex = index
        sortedIndex.sort()
        for j in range(n-k):
            if sortedIndex[j] == sortedIndex[j-1]:
                count[j] = count[j-1] + 1
        maxCount = max(count)
        for x in range(n - k):
            if count[x] == maxCount:
                pattern = self.numberToPattern(sortedIndex[x],k)
                frequentPatterns.append(pattern)
        return frequentPatterns

    def frequencyTable(self, text="hola", k=0):
        freqMap = {}
        n = len(text)
        for i in range(0, n - k):
            pattern = text[i:k+i]
            if not pattern in freqMap:
                freqMap[pattern]=1
            else:
                freqMap[pattern] += 1
        return freqMap

    def frequencyMap(self,Text, k):
        freq = {}
        n = len(Text)
        for i in range(n - k + 1):
            Pattern = Text[i:i + k]
            freq[Pattern] = 0
        for i in range(n - k + 1):
            Pattern = Text[i:i + k]
            freq[Pattern] += 1
        return freq

    def reverse_v2(self,Pattern):
        return Pattern[::-1]

    def reverse(self,Pattern):
        reverso = ""
        for i in range(len(Pattern) - 1, -1, -1):  # voy hasta el menos 1 para    que range incliuya al cero
            reverso += Pattern[i]
        return reverso

    def complement(self,Pattern):
        complemento = ""
        for i in range(0, len(Pattern), 1):
            if Pattern[i] == "A":
                lc = "T"
            elif Pattern[i] == "T":
                lc = "A"
            elif Pattern[i] == "G":
                lc = "C"
            elif Pattern[i] == "C":
                lc = "G"
            complemento += lc
        return complemento

    def reverseComplement(self,Pattern):
        Pattern = self.reverse_v2(Pattern)
        Pattern = self.complement(Pattern)
        return Pattern

    def patternMatching(self,Pattern, Genome):
        positions = []  # output variable
        for i in range(0, (len(Genome) - len(Pattern)) + 1):
            subtext = Genome[i:len(Pattern) + i]
            if subtext == Pattern:
                positions.append(i)
        return positions





    def findClumps(self,text,k,l,t):
        patterns = []
        n = len(text)
        for i in range (0,n-l+1):
            window = text[i:i+l]
            freqMap = self.frequencyMap(window,k)
            for element in freqMap:
                if freqMap[element] >= t:
                    patterns.append(element)
            #remove duplicates by converting to a dictionary and then the keys to a list
            patterns = list(dict.fromkeys(patterns))
        return patterns

    def findClumpsCount(self,text,k,l,t):
        patterns = []
        n = len(text)
        kmersDict ={}
        clumps ={}
        for i in range (0,n-k+1):
            kmer = text[i:k + i]
            if kmer in kmersDict.keys():
                kmersDict[kmer].append(i)
            else:
                kmersDict[kmer]=[i]
            if len(kmersDict[kmer]) >= t:
                test = kmersDict[kmer]
                if kmer not in clumps.keys():
                    #print (test)
                    for i in range(0,len(test)): #each position where kmer was on the genome
                        try:
                            if (test[i+t-1]+k-test[i]) <= l: # i+k ar least you have to have t positions om the same window -1 because the index starts at 0
                                clumps[kmer] = True
                                #print(test[i + 1] - test[i])
                        except:
                            continue
        return len(clumps)




#-------------------------------------------------------------------------------


def main():

    bio = Bioinformatics()
    # text = 'TCTATGGATCTGTCTACATACCTCACTGATATCATACCTCATACCTTCTATGGATCTGTCTATCTATGGATCTGTCTATCTATGGATTGGACGGTGCACTGATATTCTATGGATCTGTCTATGGACGGTGCATACCTTGGACGGTGCACTGATATCATACCTCTGTCTATCTATGGATCTGTCTATGGACGGTGTGGACGGTGTCTATGGATTGGACGGTGTCTATGGATCACTGATATCTGTCTATCTATGGATTCTATGGATCATACCTTGGACGGTGCTGTCTACTGTCTACACTGATATCATACCTCACTGATATTGGACGGTGCATACCTCTGTCTACACTGATATTGGACGGTGTGGACGGTGCACTGATATCTGTCTACACTGATATCACTGATATTCTATGGATCTGTCTACTGTCTATCTATGGATCATACCTCATACCTTCTATGGATCTGTCTACACTGATATCTGTCTACACTGATATCACTGATATTGGACGGTGCATACCTTCTATGGATCATACCTCACTGATATCATACCTTCTATGGATTGGACGGTGCACTGATATTGGACGGTGCATACCTCTGTCTATCTATGGATTCTATGGATCATACCTTCTATGGATCTGTCTACTGTCTATGGACGGTGCACTGATATTCTATGGATCTGTCTATGGACGGTGCACTGATATTCTATGGATCACTGATATTCTATGGATCACTGATATTCTATGGATCACTGATATTGGACGGTGTGGACGGTGCACTGATATCACTGATATCACTGATATCATACCTTCTATGGATCTGTCTATCTATGGATTGGACGGTGCATACCTTGGACGGTGCATACCTTCTATGGAT'
    # k = 11
    # text = "ACGTTGCATGTCGCATGATGCATGAGAGCT"
    # k=4
    # print(bio.frequentWords(text,k))
    # print(bio.BetterFrequentWords(text,k))
    # print(bio.frequentWordsSorting(text,k))
    # text = 'CCATATGGAACGCCTGTGGGTCTGTTCCCTTACGTCTTTAGGGTGTCGGATATTTTTACCGGTGCACTTAGCTAAATAGTACCTTCGGAACTTTGCCTCCCGCAACCTCGTCCGGGCGGAAAGCACCATATCTGACCGCCAATTAACTGCGGATCCTAGCGTATCCGTAATATAGATTAGTACTTTACGGACACGCTACCACGACCGAGTGTGAGTCAGGCAAGCTCGATTTACATGCGCGACCATTCGATGTCTAGGGTTTGGTGGGTCGCTCACCACCTGACAGGTCGCATTACTATACACCTGAAAGCGGACACGCCATCGGGAGAATCTGTTTAACCGTACACGGCGGGTATACTCCCAATCACACCCCTTTTACTTGATTATGGGATTGCGCTCTAAGCCTCATCTCGTAATGCATGACCGGATGATTATTACGACCGGGGGATAGGCGGGCTATGAAATGCTTTACATCGTGGAGCAAATCGTTCCTATGTACCGGTTCGTCGGCCGTCTGGAGGTTGAGAGGCTTAATGCATACGGCTTCAATAACCGTCCCAGCGTCCCGCTTGTGATCTGAAAACTGCATCGCACTAGTACTACGGTAGGTCCTCGTTTGTATATGACCCACTCTGACAGCGTAGGCTCTAAGATCTTCGTCGACTCACTCTATGGAGTTGACGGCACTAAGGGAGCCGCGGTGTATATGACACGCAGTACTCCGTCCGTGAAACATTCCGGCCTGTCTGTCGAAAGAGCATGATAGCGAAGTATGTCTTCTTCGTTCGTCGTACACTACAATTGTTGTTTTCTATGGCTGGACGGGGACAGTGTCGTCCCCGGTCAAACTTGGGACTGTCCTCCGGCCGTCTAAGCTGCCCCTCCTTAACAATCTCTAGATAAAGGTAACTCCGAGGCATGTTCCGGCAAGTCCTACGCGATCCGCTGAAACTGTTTGGACAGTATGAGTCCCGACGAATTGGAGGATGTATATCACAAGTCGGAAAGTGTAAGATACGAAAGACACGAACTAATCCTATGGCGATATGCTAACTGGGCAGGATTGGCAGAATGGACGTACTGTAAATCCGCACCAATGTGCTCCAAACCGAAACATTGATCACCACTACTAATATCGAAGGTCCTTCTTCTCGCGAAGTGGTATAACCATAGATCTAGAGTTTTGGGACAATCGGTGATGGCTAGCACAATAGTTTCCTATCCACTACAGTTGGTTCTTCTCATTCCCCCCTCGTCGTAAGCAACACTAGGTAGCCGTCATAATGCCTCGGAGTTAGTAGTGCCATAAACATACCAGAAGTGCGACTGATCTGGTGGAGTCGCATGCAAAGCAGTCGTCAAACCGTCTACCGGCACATCAGCCGGCTCGTAATGTGGGTAATTAGAATACGAATAAAATATAGCTTAACGGACTGAGCAGGTCGGCAAGGAAAGGCTGAGGTCCTGAACCGTTTACAACGGATATGCGTAAGTGCTAAACTGACAAAATTAAAACGCGATCGGTCCTGTAGGGGAGCACGGACAAAAATAATCTTGCTGTTGTTTCCTCTATAGCTTGAGAGATCTGCTCATTACCCTGCTAACAGTGGGCATGAAATTAATGGCTCGTATACTTCAAGATGTGTACCTTACTTTCGTACCCGAGGGCCCGCTCTATGCTTCAACCAGCCTTTGCTTCTGTTGAGCCACATAAAGTGATCAAACTGCTCTAGCGGTTCACCCCTAAGACCATTCTAGCTTTAAGATATTAGGCTAGGTCCACATATGTCGTTTCGCAGGCGGGTGACGTCACTGTCTATTGTCCATTTATTGTAGCTACTTGCGGTTGTTTCCAACTTGCACGTTCGGCCGTCTCGTGTTGCTAAGACACGTAGCCGCTTCTTAGAAAGATTATGAGGACGAAGTATCAAGCGTCTAACACCCTATCAGGTATATTCGAGTTTATCAGTTACAGAAACATATTCACTATGTTCAACCTACAAACGCTAGCAAACAGTAGGATAGCACTTGCGAAGACGAAAGGTTTATGAGCCAAATAATGCCCATGCAACGGCTATCCTTCGCAATCTCAGGGGTGCGGCAGATTTTTCTAGTGTTGCGTCACTTCGGTATGTACTGCGTCATGATTAGTGCCTTATTAAGACGTCTCTCGTTGGGCGTACCACGGTATTCTTGTAAAGCCCACCGTACGCCTTCCACAGTCGAGCCCCCTTTAAGCTCCTGAGGCCGCACTGACTTCTTCCACAAGAGCAACTATCACCCGTTCCCATGGATACACCTTCTCTTTTAACGAGCGCAGATTTAATTTGGGGGATCGGCCGACACTTTAGCGTCATAAGTACTTTGATTTTTGTCTATACCAATAGATATATATAATAGCCCCAAGTGGCCGGCCACACCACACTCTCCCCCTTGTTAACCCGCGCCTTATTGTACCTATTCCAGATTCATACTCAGATGTTAAGTGCCTTTCTAGGATACACGAGGCACTTCTAGTTTCACGAACGTGAGGTGGCGTCGATAATCAGCACCCGCAAGCCCTCTAGTCCTATAAGGTGGATGTGCTGGGGGTATCGCCAACCATACCGTTGCGCTTTGAAAGCACGCATGTGCGGAACGGGCCCCGGTTGAGGGTTTAGTATGGTCTGCCAAAGCTTGTACGTACCGTGGGTCAACGAATCCCCCGCTGGATAAAGAGTCAGGAGTGAGGTGACTTATCAGTTTAGGCCTACCCACAGCGACCTCATTTAATCATGTCCGAGCCAGGACACCCCCCCCGCTTAAAGCGTAGGCTGCTAGCTACCACTTAAGGACTTCAATCGATAAACCTATATCACAAGTGTGAGCAACAGTCTAAATAGGACAACACATGTTAGAACTTTCGCAGGGTATCCATGCACTCCCAGTGGTACGGGTTGAGCTCGCGCGCGCAAACGGTATTGTACCACCTAAATATGCCTTAGAACATCCGAGGGAGGTAGCAATCGTGGGCAGAGGGTCCTCGGGATTACTTGTACTAGTTACGGGGGGTGGGTGACTTGCCAGCGTTAGTGCTTATTGATTTAAGCTAGAACCTGGGGGGTGGAAAGTTGACTCAAGGGCACCTAATTCAGCTAGTGTACCTTTAGTTGGCCAGCCATCTCATAGGTGCTGATAATGACGGATTTTTCGATTGGCCGCGGCATACTCTTTCTCCTCGCTCGGTAGGGCGTTCCTTGCGGTGTCGGACTCGACCTCGCACACCTCCGGTATCGTAGAAATACTTCGGCTCGCTAGATCTGGCAAAAACCTCGTATTCCACTGAGATGAGCGCTCTACGCAGAACGCAGCACGCGTAAACTGGGGACGGATAGTCTCGGTGTGGCCACGCGTTTCCAACAGATACAGCGACGAATAGCGTCTGGCTCTCGGCAAATTCTACGGTACTATGAACCACTATGACAACGCTAAAGACGTCAATGTTGTCCAAATCGTCCGCACCGATACATGGTCGAACAGTAGCTAACGAGCGTCTGCCGTGGGTTGTTTGAGATGCTCACTACCCGTCTGAAATACCGAAGGCCCGCAGATACGACCTCCAAGTTCGGTCTTAGACTGTTATTGAAAAAAATGACGATGTGTAGTTGGCCTTCAGTAGGCGGCGTATCCCCTTACGCGCGTTAAGTTCCCGGTAATAATTATATGCCGGCTCACGATGCTGACTGACTAGGCCCTAGGTATTGTTACGATTTCAGTTGTCTATGGCCCGGGAAAACAAATCTCACAGCACGAGGTGTACGCTTTGAGCTCCCCAATCGCAAGAGCCCCCCTGGAGCATTGGCCTTACTGATTAATCATGCGGTCTCAACTATTAAATCAGGGTATGTCGTGAATACAGCCGGCCGGGTGTGCATGTCAATATATGGTAGGGCGATACGCCCACAACCTGGCCAAAGGTAGGTGCCGACTAGAGGTGACCCAATTATCGCAGAAGTTAGTTTTAGCGGGAGGACCAAACCGGGGCCTTACCGCGCGATCTAACAAGTTACGTAAATCAACACCCCTGATACTTTGATAACTGGCGTATTCATGGATGGTGTCCGAATTCCAGTGGAGATTTAAGTACGATTGACGATCTGTGAATGTCTACCCGCTTTAAAACGGACTACTGTGTCAGCATCAAACTCTGTACAAATACAACTTAAGCCCAACTGATATGGCGACAGTATTTAGTCAAATGAATTCACCTGGCTCTCTCCGATTCACGTTTCTTCCTGACGCGAAGAGTCCTCCTGGCGAACCTGAGTTAAAGGCTTAACCAGCTGTATAGTGAGGGTTAAGTATCAACTGTGCTCTAGGCCAAGCTCCACGTGGCGACCCGGTCCCAACCTCCCCGATATGCCTCCCTATAAACTATGTCCCGCATCCAGACAGGGGGCAGTAGACATCCAACGGGACGCTCGAAGGCGCCGGTGGTACAAATTATGATGCGGAATGGTCAGGAGGTCTTAGGGTGTGCCCAGAACACCGCCGGGACAAATCAGAAGATAAGAAAATATACACATACATATGCACTCGTCGTGAAATCACTTTCGTCTAAGGCTCAGCGTCCTTCACATTACTACCGGCGCTGCCGCTCGAATTGCTCGCGCTAGTGTGCGGTACCCTGGTCGTTTGCTAAGGGCGACATACAATAAGTGCCACGAACCTTTTACGCGCGCCTCTCCGCGAAGACTAATCTACTCCACGTGACCAATGGAGTCGAAGTGACCTAAATTGCAAGATTAAATAAGAGCCAACCCTAACTTAACCTACTAATCTATTCAAAAGCAAACGAGTTAATTTCAGCGAACCTATGATCCGGCCAGAGCTAGGAAGGGGGGCCCGTAGTCTTATGTGCATCAAACGCATGGGTTACAATAAAAACCCCGACCCCGGCCCTGTTTTCTACGGTTAAGTATTATACCTAACATGTTACGCTCCGTGCAAAAAACCCCTGAACCTCTAAGTGTTCACTACCTGCAGGTGCGGCGACTTCATGTCGTCTTCGCACGTGGCTCTACCGGACAGAGTGGCCACTTAAGGATATGCGATGACATACGAAGGTTGGTAGCTCCTAAACCGGTTGTGCGCTTGGTGAGCTTATATATTGCCGGTATGCGAGTCAGGATATGAATCATGCAAAACAATGTCGAGGGCCCCACATAGTCTGTTCCCCCTAGCAACACGAGCCTGACAAGCGGTGTCTTATCGGCCTCAATGTCGGGTGCAGACCAGGTGGCCGGAGATAAACTTGGGGGTAACGTAAAAAAGAGAAGAACACGACAGGACGATTTTATTTTGGTTCGCCATGGTAGATTCTAGGTTGGAGGATCAATTTCTTCAATCGTTACTCAATACCGGCATAGGGCCGCTGAAGACGAGTGCACTCCGGAGCCTACCCGGTCACTGGTCTCCCAGCCTGCAAGCTTCTAATAAGACCAGTAGACTTCGGTGGATCGCCCAGGCGAAATCAATTGATGGATCGCCCACACGTCGCAACAGCATCTCACGCTTGAAAGTCACCTTCTGGATGCCGCAACCTGGATCGTCCCAATACCAAATGCCCTGTATCTTGTGGATCCTTCAAGACCGGGCGTTCATCGGTTTAAATAGAGGGTGACTCAAGCTTATCCCGAGACCCATAACCGACACCCACGTAACAGAGTTTTCGTAGAGTGATCTTGCCTAAAACTGTCTGCGAGCCCAGCACAATTAAAGGTGTGGCCCCACGAGAAAGAATGCGCGCAAGTGTTCACATGCTGCACGAGTGGCGTCTCCGCGTCAAGCATTGACCTGCGGCTTGCAACAACAGAGAAACCAGCGAGCACGCGAGAACACCGAGACGCTGACCCCACCAGGGCAGTGCTCTGAAATATTTACTCTTTGCTTAGCGCCGCGTCTTCACCCGTAAAGGGAATTTCTTTAGTGCGCAACGGCCATTGGACCTCGTGGTCGCGCATATTATAGTGTTCGGAAATTAATCGGCACATCTTTATGGATCCCCCTCGCCTGATAAATGCCTCGACTGTGCCTAAGGGCCGATCGGGCTTCCCTAGCTTTTATTGCGTAGGGGACTATGCAACCAGATGATGTACATAATGTGGGCATGCCCCGTTCGGCCCATGACCCTCGTCCCGCCTGTTGTCCGGATAGAGAGGGATGCAGGAGGAGGCAAGCCCGAACACGTCGCCCACTTTGAGATGATCACCAGAACCCCCTATGAGCTCTGTACTAAGACTGGCTTCTAAAGCCTCGCCTTATCGTCCCAAATAGCGTTACTGTAAAGCGCCACGATAACATCAATTCAGACAATGTTGCGCACCGTACTGGGCACTCACAGGAGCGTGATTGGCAGGGAGTCAGATATCAAAATCTACCTTCGAGGGAGCTTCACTAAGAAATACTAACTCTGTATATGGCTAACCAGTTGTACTCCGGGTACATGGCTGTTCACGGATCTGCGGTAAGTCTGCGCGATCGTCTGCTATCCCTGAGACGGCTTGGGCGATAGGTGGTCGTAATCCGCTTGATCAATTTACCTCGCTGTCTGCACTTGTGTCGCTACCACATGACTGCTTCCTAACAGTCGCCACTCTTTGATGCCCGGGGGGAGTCTAAGGGTGCCAGGTTTGGGGCTCACATCATTGGCACAGATAACAGCTGGAGTTAGTAGACGATTCTGTACGTACATTCTAAGGCGCTCTGAAGAATCGCCATATAAATTCCATTGACGTCGTCCGATGCTGCTACCGAATCTGATAGGCTACTACCACCCAAACCAGCCTAGGTATCCCAGTTAGCACATTTAACGTACTGGTAGACATGGCAACGCTGCAGCAGTTACAATACGTCTATTAGGTGCAATCGGTCGCGCCATAGTGCAGGAAGTTTTCGGCCGAGCTCATTTTGGGCAACCTGCGACGACTCGGGAACCGTAAGTATGCAAGACTCTTGTATTGGTTTATCAATGTCACGTACTGCTCAGCTTTGATTTTAACACTCGTATTATATGGCTTTGCACTAGAGTTAAACTATATTGGTCCTAATAGCGGCTTACCCTGCGTAGCTCTCACTCGAACGCAGCTCGTCACTATGGACCGGTCATCGTCATGCCATGGCCCTCCCAAATTTCGCCTTCTAGGGCCCCTCGAGAGTGCTCTCACGTGAGTCTACAGGCGACAAATTAGCCAAGGCGTGCAGCGTCGGGAGTACAATTGCATTCACTTAGTCCCTACCATGTTGAGGAGCCCCGTCATGATCCTTAGATGAGAACTAGCGCGTGCGGCGCGTACTAGGACACGTTTGTTAAATGGGTGACCACATTAACGGGGAATATGAAATTCTACAACATTTAGAAAGAATCAGCAATTGATGTGTTGTAGAATCATTGCCCGCTGTCACCTGATATCTAGATTTTTTGACGGCAAACCACCACGTGGTCACGTGGGCGGTCAACTGTCGTACGGGTTTGTCGTACATTGGTACAATGGACACTGGTTTACGACTACTGCCCAGCCGCGGTTGCATCTAATAGTTGACGCTACTAATCGCAGGGCTGTGCTTTCATGCTTGTTCCCCCGGTATCCTCAAAATGCCGAGCCCTACCAAGCTGCCGATCCAAACCTCCAAACTGCGCTTGATTACCTCCATGACATGTATTGCAGAATCCCCAATTTACCAGAATTTTAGCAACTAAATACCGGTGGAACACAGCCTTAAGGTATTATGACGCGCCCAAGTAGCGGTGTCATTTAGAAACATAGTCTATACTAGGGGGTACCCCATCCCATGCAGTGAAACTATGCCGTTCGATTTGAAACTGGGTCTGATTTCGTTAATACCGCTGCGCGCTAAATGGAATAACACAAGTGTCCTCTACGTCCAATACTCATCCGGGGCAAGAACATCTCGGTGCATCGGAGGTCCCAATGCCATCTCTGGAAGTCAACTCATGGTGGATGACCTCGTAATGCTGGGGGAGGCAACGCGGGCGCTGATGG'
    # print(bio.reverseComplement(text))
    # text = 'CCCCACTCTCTGACCCTGTGCCACTCTAAGCCACTCTTGCCACTCTTCCACTCTCCACTCTCCACTCTCCACTCTGCCTCCACTCTCTATCGCGCCACTCTCGCGCCACTCTAGCCACTCTCTCCCCACTCTGAGGTACCACTCTTCCACTCTACAACCACTCTCCACTCTCCACTCTGCCACTCTTTCCCCACTCTCCACTCTGAACCACTCTCGACCACTCTCCACTCTTCCCACTCTCCACTCTATTCCCACTCTCCACTCTATGCAGCCACTCTGCGTGGCCCACTCTCCACTCTGGTCCACTCTACCACTCTCCACTCTCCCACTCTCTACCACTCTTTTCCACTCTGCCACTCTTCCACTCTGGTTAACTCCTATTCGCCACTCTGACCACTCTAGCGACCACTCCACTCTTGAATCACCACTCTACCACTCTCCACTCTACCACTCTACCCACTCTCCACTCTCTACCACTCTCCACTCTCCGGCCACTCTTCCACTCTGGCCACTCTCCCACTCTAAAGCCCACTCTCCACTCTCCACTCTGCACCACTCTTCCCACTCTATAAGGCCACTCTCCACTCTCCACTCTCTCCCACTCTTACCACTCTGCCACTCTGTTGCGAAAAACAACCACTCTGGTAACTCCCCACTCTTGCCCACTCTCCACTCTGATTCCACTCTAGGTTCGGACCACTCTCTGATGCCACTCTTCCACTCTCCACTCTGACACCACTCTCCACTCTCCACTCTTGCCACTCTTACACCACTCTCCCACTCTGTCCCCCACTCTCCCACTCTCCACTCTCCACTCTGCCACTCTGTACCACTCTAGCACAGCCACTCTTCCTGACACCCACTCTCCCACTCTACAGCCACTCTCCCACTCTCCCACTCTGGCCACTCTAACCCACTCTCAGGCCGCCACTCTGAACGCCAGCCCTCCACTCTCCACTCTTCCACTCTTCCACTCTATTTCCACTCTATCTCCACTCTCCACTCTTTCCCCACTCTCCACTCTCCACTCTGTTTCCCACTCTACCCCCCACTCTCGCCACTCTTCATAGCTCTACCACTCTATCCCCACTCTTTTGACCAGCTAAGCCACTCTTCCACTCTTCCACTCTCCACTCTGTGATCACCACTCTATCAGAGGTCCCACTCTAACCCACTCTTTAGCACCACTCTCCCACTCTCCACTCTTCACCACTCTCCACTCTAACACCACTCTATACAAAATCCCACTCTCCCACTCTCCACTCTCCACTCTCGTCCACTCTGCGCCCACTCTCCACTCTCCACTCTCCCACTCTGTCCCACTCTGTGATGTGCCACTCTCTCCAACCACTCTCCACTCTCCCGCCACTCTCCACTCTAAAACGCTCCACTCTTCTGGCCACTCTTAATCCACTCTACCACTCTTCCACTCTGGCCACTCTTGCTCCACTCTACATCGGCCACTCTTCATGACGCCACTCTAGCCACTCTCCCTTGCCACTCTACCACTCTCCACTCTCCACTCTCAGCCACTAGGCCACTCTCCACTCTTCCACTCTACCACTCTGTTTCCACTCTCCACTCTCCACTCTCCACTCTGCCACTCTCCACTCTCCCACTCTCTCCACTCTCCACCACTCTCCACTCTTGCCACTCTCCACTCTGCCACTCTGTATGCCACTCTCCACTCTACGCCACTCTCCACTCTTCCACTCTCCACTCTCCACTCTGCCACTCTCCACTCTCCACTCTGTAATCCACTCTACCACTCTCTGTTCAAATACCACTCTGTTGTCCACTCTCCCACTCTACCACTCTACCACTCTGACCACTCTCCACTCTCCACTCTGCCACTCTCCACTCTACCACTCTTCCACTCTCCCACTCTGGCACCATCCACTCTCTACCCCACTCTCAGACCCACTCTCCACTCTCCACTCTGCCCACTCTTCGAGCCCACTCTCACCACTCTGCCACTCTTTCTACCCACTCTTAGGGCCACTCTCCCACTCTGAGTTCCCACTCTCCACTCTAGGCCTAGCCACTCTGGACCACTCTCCACTCTCCACTCTCCACTCTCGGCCACTCTGTGATTCCACTCTCCACTCTGTCCCCACTCTTACGCCACTCTCCACTCTCGCCCCACTCTCCACTCTAATGGCCACTCTCCACTCTCGCCACTCTACGGCTGCCACTCTTTCCACTCTCTCCACTCTGCCACTCTTTCCACTCTCCACTCTCGCCCACTCTCTTCGCGCCACTCTTCCACTCTCGCCACTCTCCACTCTCCACTCTTCTACGCCACTCTAATCTATGCACTCCCACTCTCCACTCTAGTCCCACTCTCCACTCTGTGAATGAATATGCCACTCTATCCACTCTCACCACTCTCCACTCTCCACTCTATCCCACTCTCCACTCTCCACTCTCCTGGTGCCACTCTGCCCACTCTCGCCCACTCTCCCGTGACCACTCTCCACTCTCCACTCTCCACTCTCCTGCGTCCAAACCACTCTACTCAGGCCACTCTCAGCACCACTCTGTCAACGCCCACTCTGTGACCCCACTCTAGCTCGGCGTCCCACTCTCCACTCTTGCCCACTCTACCGACCACTCTCTCCACTCTCAAGCGCCACTCTTTCTCCCCACTCTACCACTCTTCCACTCTTTAGCATGGGGTACCACTCTGTCCACTCTCCACTCTGGCCACTCTTGCCACTCTCCCCACTCTCCGCCACTCTTCCCACTCTGGCCACTCTGGAACCACTCTCCACTCTTGATTCCACTCTCCACTCTGATTCGTCCACTCTCCACTCTATCCACTCTCCCACTCTCCTCCACTCTATCCACTCTGTACCCACTCTTCGCCACTCTCCACTCTGCCACTCTTCCACTCTACCACTCTCCACTCTACTTCCACTCTCCACTCTCCCCACTCTCCACTCTCAGAGCCCACTCTCCACTCTACCCACTCTACCACTCTCCACTCTGTCCACTCTCCACTCTCCACTCTAAACCACTCTCCACTCTTCGTTCCACTCTGTCCACTCTCCACTCTCCACAACCACTCTCTCTCCCACTCTCCACTCTGTCCCACTCTTGTCTTCCACTCTCCCCTGGTGCCCACTCTCCACTCTCCACTCTTGCAAACCCACTCTCCCGCCACTCTCGACTCCACTCTTACCACTCTGTCCACTCTAGTTCACCACTCTCCACTCTTCCACTCTGGGACCACTCTCCCACTCTCCACTCTGCCACTCTCCACTCTCCACTCTCCACTCTGCTTAGGCGCCACTCTCACACCACTCTTTGACCACTCTGCCACTCTCATTCCCGATGTACCACTCTGGGGTCACACGGCCACTCTCCACCACTCTCTCAATCCACTCTATCCACTCTACCCACTCTTTGAGGATTATTGCCACTCTGCCACTCTCTCCACTCTGGGCCACTCTGCCACTCTGCCACTCTCATGCCACTCTTTCCACTCTCCACTCTGGTCCACTCTACCACTCTAGGGCACAGCCACTCTCCCCACTCTTCCACTCTCCCACTCTGCTGCCCACTCTCAAACCACTCTCCACTCTCGCCACTCTGGCCCACTCTAGACCACTCTCTTACCACTCTATACCCACTCTGCCACTCTGCCACTCTCCGATACCACTCTCCACTCTATCCACTCTTCCACTCTCCACTCTAGATTTTCCACTCTCCCACTCTGACCACTCTTTTCGAAGCACCACTCTCCACTCTCCACTCTGCCACTCTGACCCACTCTACCACTCTCCACTCTGCCACTCTCCACTCTTCCACTCTCCACTCTGCTGCCACTCTCCACTCTCCACTCTCACCACTCTTCCACTCTCCCACTCTTTCCACTCTCGCCCACTCTGCACGCCAGACGTGACAACCACTCTTGGCCACTCTAATCCCACTCTACCACTCTAGCGATTCCCACTCTATCACCACTCTCCACTCTGATTTCCACTCTTGCATCCCACTCTCCACTCTAGAACTCCCTGCTCATACCACTCTCCACTCTTCCCACTCTCCACTCTGCTCGTGCCCACTCTATTCAAGCGCACAGAAGCCCACTCTGTCCACTCTACCACTCTACCACTCTTTTCGGTCCACTCTACCACTCTGACCACTCTTCCACTCTTGTCACCACTCTCCACTCTCGCCACTCTCCACTCTAGAGGTTCCACTCTCCACTCTAAGCCACTCTATCCACTCTTCCACTCTATCCACTCTCCACTCTCCACTCTCCCACTCTTCCACTCTGCCACTCTGAATGAGGTGCCACTCTGGATCCACTCTCCACTCTCCCCACTCTAGGAGGGCCCACTCTCTCGCTAGTCCACTCTCCCACTCTTCCACTCTTGAGTAGATCATCAACCACTCTTGAAGCCCCACTCTTACGAACCACCACTCTAGACCACTCTCGCCACTCTCGTAACCACTCTCGCCTCCACTCTTCCACTCTGGCCCACTCTCCCACTCTTTCTCCACTCTACAGAATCCACTCTTACCACTCTCCCACTCTGCATTCGTTAATTTCCACTCTATACCACTCTTCCACTCTACCACTCTTTCTCTGTAACTGATCCACTCTTTAGAGGCCACTCTGGTACCACTCTGTCAGTTCCACTCTACCACTCTCCCCACTCTCGCCACTCTGACCACTCTCGCCCACTCTGGACCCACTCTCCACTCTCCACTCTCCACTCTAAGCTCCACCACTCTGCCACTCTTATGACCACTCTTCCACTCTGGCCACTCTCCACTCTCCACTCTTCCACTCTCCACTCTCCATCCGCACCACTCTTAGCCACTCTCCACTCTACCCACTCTTGTGATCCACTCTAGCCACTCTTGCCACTCTTTCCACTCTATTCCACTCTCCACTCTGCCACTCTCTTTGGCATATCACGACCACTCTCCCACTCTAACCACTCTACCACTCTTCATACCTTCCACTCTAACCACTCTGCTCCACTCTGGTATAACCACTCTTACCACTCTCATCCACTCTTTACCACTCTTCCCACCACTCTACCACTCTCCACTCTGCCACTCTTTGACCACTCTCCACTCTAATACCACTCTTCCACTCTCATTCATCCCCACTCTTCCACTCTCCACTCTTACCACTCTGGGGTGGGCGCCCACTCTCCCACTCTCCACTCTCCACTCTCCACTCTCCACTCTCCACTCTTCTGCCACTCTCCACTCTCCACTCTCAAACGGGCCCCACTCTCATCCCCACTCTACCACTCTCACGACATAGCAACCGTCCACTCTCCACTCTCCACTCTTCGTCCACTCTCCCACTCTACGGCACACCACTCTATTCGCGCCACTCTACACCACTCTTTGGGCGGTCCACTCTCTAAGGCCACTCTCCCCACTCTATGAGCCACTCTTCATATCCCCCACTCTCCCACTCTCCACTCTCCACTCTGGCCACTCTGTCCACCACTCTCACCACTCTCCACTCTCTAACTCCACTCTCCACTCTCGTACCACTCTAGGATCCCCCACTCTCCCACTCTCCACTCTCCTTTCCACTCTATCCACTCTCCGGGCGTACCACTCTTTTAGCCACTCTGTAGTACTCCCACTCTTCCACTCTGCCACTCTTGCCACTCTTAGGTGCCCCCACTCTAAAAGCTAACCACTCTCCACTCTCCACTCTGTGCACCACCCACTCTGCCACTCTATACCACTCTTCCCACTCTGGTCCACTCTGTCCACTCTTGGCCACTCTAACCACTCTAAACCACTCTGGTTCCCACTCTGATAGACCCCCACTCTCCACTCTGTCGCCACTCTCGCCACTCTAGCCACTCTCCACTCTCCACTCTTGCCACTCTGCCACTCTTCCACTCTACCCACTCTGATCCCACTCTACCACTCTATCCACTCTTCCACTCTCTCCACTCTTACCCCACTCTTTTAACCACTCTCACCACTCTCCCACTCTGCCACTCTCACCTTGACCACCACTCTTATGATGAATAACCCACTCTCCACTCTGGCCCCACTCTATCCACTCTCACCACTCTGCCCCACTCTCCACTCTGGAGATATCCACTCTTCCACTCTAAATCCACTCTTATCGTTGGTAACCACTCTATACCACTCTCCACTCTCATGCCACCACTCTCCACTCTCCACTCTAAGCGAATTGCCACTCTATCCACTCTCCACTCTCCACTCTCTGTGCCACTCTGGCTCGACCACTCTGAACCACTCTTCCACTCTTACCACTCTCCCACTCTCCTTACGGCCACTCTCCACTCTTGTTCCACTCTCCACTCTCCACTCTAACCACTCTCCACTCTACCCACTCTATGCCACTCTTCCACTCTCCACTCTCAGTGCCACTCTCCACTCTATCCACTCTCCACTCTCCACTCTTTCCCCACTCTCCACTCTCCACTCTCCGAACCACTCTGCCACTCTGGGGGGCCACTCTCCACTCTTTCCGGAACCACTCTGGCTACCACTCTGCGCCACTCTCCACTCTCCACTCTCGCCACTCTGCCACTCTCCACTCTTCCACTCTGCCACTCTCCACTCTTCCACTCTGTGGGTTAACCACTCTCCACTCTATAGACCCACTCTACCACTCTACACCACTCTAGAGGCCACTCTTACCACTCTCGCCACTCTTGATAAACCACTCTCCCACTCTGCCCACTCTTCATCGGTCCACTCTCCACTCTTCAAGCTGAGCTCTTAGGATTCCACTCTTCCACTCTTCTCGCCACTCTGGGCCACTCTAGGTCCACTCTTCCACTCTCAGCCCACTCTCGATCCCACTCTTCCCACTCTCTGGCCAAAAGGTTTACTGACCACTCTGCCACTCTTTCCCACTCTAGTGTCCACTCTGGACCACTCTGCCACTCTACTCCACTCTCCACTCTCCACTCTCCACTCTCCACTCTGCTCCCACTCTTACCGACTCCACTCTGCCCACTCTTTCCTCCACTCTGTGTGCAGGCCACTCTTCCACTCTGGCCCACTCTTGCCACTCTGCCCACTCTATTCCACTCTGCCACTCTGTCGGACCAGGCCCACTCTCCACTCTGGTCCACTCTTGAGGCAGCTATCCACTCTGCCACTCTCCGAGGCATCCACTCTTCCACTCTGTTCCACTCTCCACTCTCCACTCTGCCACTCTGAACAACCGGCCACTCTCCACTCTCCACTCTCCACTCTATGTTGTGGTGCTACCACTCTCACCACTCTTCCACTCTCCACTCTTAATGCCCACTCTCTGACCACTCTGACCACTCTAGGTTACCACTCTGCCACTCTAACCACTCTCCACTCTTGCCACTCTCCACTCTCCCACTCTCCACTCTCCACTCTACCACTCTCCACTCTTCCACTCTACCACTCTCCACTCTCCACTCTGTCCACTCTTTACGTCCACTCTCTCCACTCTCCACTCTTGTCCACTCTTCGCCCACTCTTTATTCCCACTCTAGCCACTCTCCGCCCCACTCTACCACTCTCCACTCTCCACTCTCCACTCTCCACTCTCCACTCTGCCACTCTCCACTCTAGTACGCCACTCTGCCACTCTACCAGCGCCACTCTGACCCACTCTCCACTCTCCACTCTCGTTACCACTCTGCCACTCTAGCCACTCTACTACCACTCTCCACTCTACCACTCTCACCACTCTCCACTCTCCACTCTTCCACTCTTTGAGGCCCACTCTTTGCCACTCTGCCACTCTATCCACTCTTCCACTCTCCACTCTCCCCACTCTTACCACTCTCCACTCTTGCCCACTCTCTTGCCACTCTGTCCACTCTTGAGATTACCCACTCTTACTCCCCACTCTACCACTCTCCACTCTGGTCCAGACTTGCCACTCTCCACTCTTCTCCCCCACTCTGGCCCACTCTCCACTCTCTCCACTCTCCACTCTATTGTCCACTCTCCACTCTCGCCACTCTAGACCACTCTCCCCACTCTCCACTCTCCACTCTTCCACTCTTCATTACCACTCTCCCACTCTGTCCCCCACTCTCCGCCACTCTCCCACTCTCGTAGCCCACTCTCCACTCTATTCACAGCCCACTCTGCTACCCATCCACTCTATGCCCACTCTCCCACTCTAACCCACTCTGAATAGACCACGCCACTCTCCACTCTCCACTCTACCACTCTCCCACTCTCCACTCTTATGACCACTCTCCACTCTAACCACTCTGTCGTGCCACTCTCCCTATATCCACTCTATAAGTTCGACCACTCTTCCACTCTCCACTCTTCCACTCTATTGTGGTGCCACTCTCGCCACTCTGACCACTCTGAGACCACTCTCTCCCACTCTCCTTCCACTCTCCGACCCACTCTTGGCCAACCACTCTCCGGTCCACTCTCCACTCTGGCTAGCCCACTCTAGGCCACTCTGAACCACTCTCTACTCCGTATATCCACTCTAGTCCACTCTGATCCACTCTGCCACTCTGAACCACTCTGGACCACTCTCCACTCTCGCCACTCTCCACTCTGGCCACTCTCCACTCTCTACCACTCTCCACTCTCCACTCTGAATTGATCTGTGGGCCACTCTCCACTCTCCGCCCACTCTGCCACTCTCCACTCTACTGGCCCACTCTACGCCTTCCACTCTGAATGCCACTCTCCCACTCTCCACTCTCGCCATATACCAAGCCACTCTCTTCCACTCTCCACTCTCCCACTCTTCGTTGTCCCACTCTGCATGTACCACTCTCCACTCTACCGTGGGTTCTGGACTACCCACTCTCGCCACTCTCCACTCTCCGTCGCCACTCTTGGATTCTGCTCCACTCTCCACTCTAGTCCCACTCTTCGACCACTCTCGCCACTCTCCACTCTCGAATCCACTCTCCACTCTAGGAGTCCACTCTCCCACTCTATCCACTCTGCCACTCTCCCACTCTTCATACCCACTCTCCCACTCTCCCACTCTCCACTCTAGACCACTCTCCACTCTCGCCACTCTCCACTCTCCCACTCTGTCCACTCTCCACTCTCCACTCTCCCACTCTTCCACTCTCCACTCTAGCCACTCTCGCCACTCTAAGCCCACTCTAGTATCCCACTCTAATTTGGCCACTCTCACCACTCTGCCACTCTCCACTCTGGTGAATGCCCACTCTTCCACTCTCCACTCTCCCCCACGTCCACTCTACCCACTCTCCACTCTCACCACTCTAGCTCCACTCTTCACCACTCTCCACTCTCCACTCTCCACTCTCCACTCTACCACTCTCTCCCACTCTCGACCCCACTCTCCACTCTCCACTCTCCCCCACTCTCACCACTCTGAACCACTCTCCACTCTAGTCCCACTCTCCACTCTCCCCACTCTTTCCACTCTCCTTTGATCCACTCTCTAACCACTCTGGCCCACTCTCCACTCTAAACCCACTCTTCCACTCTTTCCACTCTCTTTTTCCACTCTCCACTCTACGACCACTCTAGACCACTCTCCACTCTCCACTCTTGCCACTCTCTCTCCACTCTCCTTTACGGGTCGCCACTCTGCCACTCTCCACTCTCCACTCTTCCCACTCTATTTAACGTACCACTCT'
    # pattern= 'CCACTCTCC'
    # print(bio.patternMatching(pattern,text))
    # with open('Vibrio_cholerae.txt','r') as fileVibrio:
    #     text = fileVibrio.read()
    # pattern = 'CTTGATCAT'
    # print(bio.patternMatching(pattern,text))
    # text = 'CCGGTATATACAGATGACGGCTACCGACTTCACAGTTGTTGCGCCAGAACAGTGGGACGTTATTACAATCGGGTGCGGCATGCCCCGAAGGACAATGTCTCTTTTGCGGTGACTCGTGTGGCTCGGCATTATCGTAGAAAGGGCTTTTCTTTTGCGGTGTTTGCGGTGGCGGTGGTGGTGATACGTAAATCCGGAATCCGGTCAGCCTTTTGCGGTGGGACGCTTTTGCGGTGGACCGTTTTAACCGTTGTGTAAATTTTTGACCCTTTTGCGGTGTGCGGTGATCAATAGCCTGTCTTTTGCGGTGCTTTTGCGGTGACATCAACGGACCAGCTATAGGACATGACCTTTTGCGGTGCTATTTCCACCGGACTAAGTTCATAGTCATGTCTTTTGCGGTGTTTGCGGTGACCGTTTTGATGCGCCCTTTTGCGGTGTTTGCGGTGCCGCTTTTGCGGTGTACCTTTTGCGGTGTTTGCGGTGCCCCACCCTGTTCCCTTTTGCGGTGTTATTCTTTTGCGGTGGATGCCACGCCGTTCCAAGGCCCTACCGCGTAATCTGTCTTTTGCGGTGGAATAAGGATCCAGTATGTCTGGTGTATGCACCTCGGCCTTTTGCGGTGTTTTGCGGTGGTGAAGACCTTTTGCTTTTGCGGTGATACCTTTTGCGGTGACCGGTAGCCAGGATGCGAAGCTTCCCAAGTCTATGGCCCAAGTCTAGCGTCCGATTTCTCTTTACCCACATGGCATTATAAGTCAATTATTGACATGGTCTAAAGGATTTGCGGGCTCCGGGGCAATAAATCGTCAATCTCGGTCACAGTCTGCAAAATATTAATAACTATTATTGCCTTTGGTGGATAACCGATCACGACTATGTTGCAGAAGGTTTACGCTCTTTTTAAGCGGCCGACAACATAGCTGATCCTAGGTAATGGTAGAAATCGGATCGGACGCCATTTTTTTGTGCCTTGAGGTGGAACAATAGGGCAAAGTGAGGGGGCCGAGTGGCCATCAGCGTCACCATTGTTTCTCGCGTGTGTATGCAGGTGACTATGGTGTTCGACAAACAGAGTACTTGAGGGATGAAGGAATCTCACAACGCCGAATTATGTCATGACGCTTTGTCACGCACACTGTGGTCCAACCAGCTTCCTTTAAGGTGGTGAACACCTAGAGGACCATCAGATTTCTTACAGGACCTCAAAGTCTGTTTCGCGTGGACTGCGGTTACTGTTCTGAGAAGTAGGGGGAGTGGAACATAAGTAGAAGTAGGGGGATCCCAAAAGTAGGGGGACCGTAGGCCGGGCATTGAAGTAGGGGGATAAGTAGGGGGAAGTAGGGGGAATGGTCTAAGTAGGGGGAATGCTAAGTAGGGGGACTAGAGTGTAAGTAGGGGGACGATCTACTGCACCCTGTCCGGGGAAGTAGGGGGAGGGATTAAACACATTTAGCCTTAAGCAGGGATGGGGCTAAAGTAGGGGGAACGATAACTATGTGATATCTGTAAGTAGGGGGAAGCGTTCCATGGAGAAGTAAGTAGGGGGAGGGGGAAGGGGGATAGGGGGAGGTATCGAAGGAACACGTCCCATGCAAATCATTACTGAACTTACACCCGAAGACCAACCTTCAGAAGTAGGGGGAATGAAGTAGGGGGAGCGGGTTTAAGGGCACCAAGAAGTAGGGGGAGACCACTTTGCTCATGTGCTCATGCGGGATGCTCATGCGGCTCATGCTCATGCTGAAGTAGGGGGAGCGGAAGTAGGGGGAGAGAAGTAGGGGGAGAGCGGCAAGTAGGGGGAAATAAGTAGGGGGAAGGGGGACTTGAAAATTGCTCATGCGGTGCTCATGCTCATGATAATGAACGGATAAATAATGAACGGCATGCGGCATGCGGAAATGCCATCTTTTGACGGAATATAATGAACGGGATAATGAACGGCGTCTTGATGCTCATGCGGCATGCGGATCTTTGCTCATGCGGTGGTCATAATAATGAATAATGAACGGGAACGGGGCTCTGCTCATGCGGATGCTGCATAATGAACGGTGATAATATAATGAACGGAAATAAATAATGAACGGGTCTCTTTCCATGCTCATAATGAACGGGAACGGCATGCGGGGAATAATGAACGGCATGCGGATGCAAGTGCTCATATAATGAACGGGTGCTCATGCGGTTAGATCTTGAAAATGCTACATGTGCTCATGCGGTTCTTGAAAATGCTCATGCGGATGAATAATGAACGGGCATTGCTCAATAATGAACATAATGAACGGTGAATTTCAACGTATTAAAGTGATAATGAACGGTGATAATGAACGGAACGGATAATGAACGGTTCATAATGAACGGGGGAAAATGTTAAATAATGAAATAATGAACGGAGACATGCTATATTACTCTGTTGATAATGAAATAATGAACGGATAATGAACGGGGACCCCAGCATATGCTATTGATCTGGTTAACTGCCCTTGTTGCAGAGCCCTCATGCTCTCACCAGTACGGGAATTTGCATACCGGCGAAGTGGCTTCATTTGTAAATGAAGTGATCAGCGTACTTGGAGGCGTCCCCTAGGGACCGATTTCGTGACCCTGTACACGATCGGAGTTCTGGTTCCCGAAGCGCATCGCTTTTTTTCAAGCCAGGTTCGAGGTGGATTTAAGCTTACAAGGGCTGGTAGTCGATGGATCAAAGTGACTCATTACACACTCAATCCACCTGACATAGGCATACTCGCATTGCGAACGCCAGCTGTTGAATGCTGTCTACTCAGACTGAGGACAGACGGTCTAAGGACTAAGGACAACAACAAGGAGCGGCGCCTAAGTTACGCGCTAAGGCTAAGGACAACGGACAACTGTATGCCGCTTCTAAGGACAACAGGACAACACGAACTAAGGACAACACAGCCTTGTTGGAGAGGGGGCGGACACTGTCCAGTGTTATGAGCTAAGGACAACGTATCTAAGGACAACGACAACATCCGTATCGGTTAGGCGGTGTGCCGCTTTTCGCCTTTTGGCATCTAAGGACAACCTAAGGACAACGACAACCCTACTAAGGACAACACAACCGTTTCCACGCAGGTTGTCTCCGGTAGAACTAAGGACAACTCTACTAAGGACAACGCTAAGGACAACCAAGCCGGATAGCACACGCAGCTAAGGACAACGCTAAGGACAACACAGAATCGGCTAAGGACAACAGGTGAAATGGCGCTAAGGACAACTCTCTACTAAGGACAACCAGCTACTAAGGACAACCATAGGTAGTAGGCAGCCTCCGGGACCCACTTTGTTTCTAAGGACAACCACCTAAGGACAACTAGGATAGTTCTAAGGACAACATCCGTGTATCTTCGTGCTAAGGACAACCGATTATAGCACGTCACCAAAGGCTAGAGTCACGCCTTTCGGAGATATCAGAGAGCTTACCCACCACTCCATTCACCTTACTTAGAAACGACATGTTTAGCTAAATATCGCTGATGGGGCTCCTTATCATGGGGTAACGGATTACCTGTGATAGACAAATAAGGCAGAGACACCCCCCAATAGTGAACATTCTTTAATATTCTGGGAAAGTGGATAAACCAGGCACCATTTGCTAGCATTAAGGTCGCCGCTGGGATGCTCCTCGCGCGCGTATCCTCGTTGGCTAAGCTCGACAAAGATGCAGGAGGAGCCGTCATAACAAAGCCGAAACGGTCCTAGATTTACTGACATCTGCTTGTTCGGGGAATGCGCAAAGGTCTGTAGCTTAGCAAACATATAAAGATCGCTAAGATCGCTCCACTGGTGGATGTGCATTAGGAATGTATAAAGATCGCTGTAAAGATCGCTGATAAAGATCGCTAGCAACAGCAAGCCTCGTAAAGATCGCTCGTAAAGATCGCTTAGCATCGTCCCTGTCGCAAATTATAAAGATCGCTCCTGGCCCGTATCAACCTCCGCACATCCTTGCTTCGCTAAAGATCGCTAAAAAGGATAAAGATCGCTTCGTAAAGATCGCTGGCCATCCTTATTACGACCCGCGCCCGTATGTAAAGATCGCTCACATAATAGTGGGTGCCGTGCAGCCACCCTTTACCACACAGGTACTAAAGATCGCTCTAAAGATCGCTCAATGCGACATAAATAAAGATCGCTAAAGATCGCTCTCCTAGGCTAAAGATTAAAGATCGCTGAATACGCTCGTCATAATGATCCCTAAATAAAGATCGCTAAGATCGCTTTTTTTTAAAGTAAAGATCGCTCTTTGCTTGCTATTGTCTTTCGTTTGCACACTCTTAAAGATCGCTAAGATCGCTAAGATCGCTGCTTAAAGATCGCTCCGTACGTAGGTCTGGTGACGATTGCATAAGAGAACGTCTCAGGTAAGGCCGTAAGTACAGGGGGCACTATTGGTCATCTCGTGACTCGCTTGGAGAGGCTGCTACATCCGCGCATTAGTAGATCTCGGTGGTCATTGGAGCGATACAAAAATTACAGCCGCTCTGAGCTACAAGAGATCCGATTTGTCTCGCTAAAGTCCAGCCCCTTCGAATCGTATCTGTAAGTTACAGGTCATGATGTTTAGCTTGATTCGGAGGAAGTAGATCGGCGTACCAGTTCCAGGGTCCTTTTCCGGAAAGCCCTCGTGTATCCCTATCCGAAATTACATGTGTCTAAATCGCTGGTATTCCTAGACCCGTTCCCACTCTCTCTCAAGACGTCTGCAGTCCTGAACTCGCAGCTATAAATTGCCATACACTTAGGTGAAGCCGCACCCTAACCAACGTTCTGTCTGAAGGTGACTCTTGCTCGTGCCAAAGACATCCGACGCTCCGAATGGGGTTACCCCTGCCTCATTCTCACCCTACACTCGAGGTTCATCCGGTGTCTCTATGCTCCTATTGGCAATCACGGCTTTCTGGCGGCCTTCGGGGATGTCAGGGAAATGGAGACAAACAGAGCAGGCGAGGGATGCCAAGACGTTTGGCTAAGAATGGCAACAATTAATTTGGAAGAACTGATACTTACTAAACGGCGATCGGGACATACTCGTTTGTCTCCCGAGGTTACTCGGATGGTCAACCTATTTGATTTAGTGTCGTGCTGTCGCTAATCCGCATCACCCCTTCTGCCGTGCCAGACCTTTTCCCCCGGCGTGATATATTCTCGTACAAGTTAAATACATAACTGAAGGAGTAACTCGGAAGGGGATAACCCCAGTCTCCTCGCGTACGACAATAGGCGCCGGTGCCAGCAGTGTAACAAAGGGCTGGCATATCAGGTAGGTCTATCCTTAAAGGGACCATGGAATATGCATAAATCCCAGGTTGTCAGGTGGACTCGCCTGAGTAATAAGTCGCCAAGATTCAATAGAAACAGCTGCATATTATTGCAGGAGCAGTCGACGGAGGAGCAGTCGCAGTCGTCCTTGACTAGGAGCAGTCGGGACTTAGGAGCAGTCGAGGAGCAGTCGCAGAGGAGCAGTCGACGGCTCCAGGAGCGACGTGGTAAGGAGCAGTCGAAGCGTTCACAGGGTGAAGAAGAAAGGAGCAGTCGATTAAACATTAGGAGCAGTCGCATTACCGCTTTGCGGAGGAGCAGTCGACTCACTTCGTTCTCGCTGACAACTGGAGGAGGAGCAGTCGGTAAGGAGCAGAGGAGCAGTCGCGGTAAGGAGCAGTCGGGAGCAGTAGGAGCAGTCGCATGCCCTCTACTCAAGGAGCAGTCGTTGGGCTCCAATTACAAGGAGCAGTCGAGACGTACTCCAGGAGCAAGGAAGGAGCAGTCGAGGAGCAGTCGGAGAATGAAAGGAGCAGTCGAGGAGCAGTCGATTAGGAGCAGTCGTCTCATTTTGACCAGGAGCAGTCGAGGAGCAGTCGGAATATTGTTCCACTACTTACAGAGACCAGGAGCAGTCGCAGAAACGATTACACCGGTACGGTAGAAGGAGCAGTCGCTACGTTTAAGGAGCAGTCGACCGGTTACACCGGTAACCGGTTACACCGGTACCTTACACCGGTACTTACACCGGTAGGCGCCAATTACACCGGTACCGGTAGACCACCAGTTACACCGGTTACACCGGTAGGTATGACCACCAGAATTACACCGGTAACCTTACACCGGTAGGTAGAACCACCAGAACATTACACCGGTAAGGGCAACGTTACACCGGTACGACTTTTTTACACCGGTACCTTCGTCCGATTTTCATCGTTGGCGAAATATGTTACACCGGTAGGCCTATTATAACGAAGACGTACGTACTCCTTCCATGAAGATCACATCGTACGTAACGTGGACTTACACCGGTACCTTACACCGGTACCGGTATATGATTACACCGGTATAAAGGAGACCACCAGAACCTTACACCGGTACTAATTACACCGGTAAATATTTACACCGGTAAATATGGCCTAATATGGCCTATGACCTAAAATATTTACACCGGTAGAAAAATATGGCCTAGGAGCAATTACACCGGTACACCGGTAAAAGGGGGCATACGTATCTCCTCACAATATGGCCTACCCTTTCCTGCTCGAATATGGCCTAATGGCCTAATAATATGGCCTAAATATGGCCTAATATGGCCTAGGCCAAATATGGCCTACTAGGAGCCTGGTGATTGGTCCTCGGAGGGAAAAATATGGCCTATGGCCTATGCAGAACACAGGTAGAACCCAGAAATATAATATGGCCTAGGCTTGTATTGATGACTGTAAGATCTTAGGCTAGATCCGCATAGCAAGCTTATAATATGGCCTAGCAACGACCTAAGAATATGGCCTAGATAATATGGCCTACTAGACATGAAATTCCTATCGGCACTAGATAAACTACTTTGGCAGCTGTGTATTGTTATGATGTGCGCAGTACAATGCGCAGTACATGCGCAGTACATAGTGAAGCAATTGTGCATCACTGGCTCATGTTTATTGGATAGTATCCTCCGGATGCGCAGTATGCGCAGTACAGCTGCGCAGTACAAATCGTCTGCGCAGTACACTGCGCAGTACAGTTCTACTGCGCACCCAAAGGCTGCGCAGTACAACATACCATGCGCAGTACAGTCGCCGGTCGTTGCGCAGTACAACGGTGATGAGCGAGAAAAATAATGCATGCGCAGTTGCGCAGTACACATGTAGGAATGCGCAGTACATCGCATAGCGATGTGCGCAGTACACTGCGCAGTACAATGCGCAGTACACCTGCGTGTATGTGCGCAGTACATGCGCAGTACACGCAGTGCGCAGTACACAGATTTGCGCAGTACAGAGTTCGTACATCACCCCACGAATGCTGCGCAGTACAATGCGCAGTACATATTCCTAACAGTGAGTCCTCGAGTAATGCGCAGTACAAGCTAGGCGTGGGGATGCGCAGTACAAACACCTTTGAAAGCATGCGCAGTACACCCGATATCACGGCAAACCTGCGCAGTACAGCGCAGTACAGGACCGCGCGCAGCCTATCTGTATTACGTCTCCATCTAAGACCTAACCGGGCATAGTCCGCAGTTTACGAGGGTATGGGTGGTTAAGATTCAACAGGATGCATCGACTTCCTCCTTAGATGCCTCCTGATCCCCTCCAGGGTCTTTATAAGCGCGGCCTTGCGCTGCCTTGGTCGTGTCCGCGGTTCCTGTTGAGCGGCCTAAGACCTGTTCCATGCCATGTTAAATCAGTCAGTGAACGCTCAAAGGTGTGTCCGGAAGCAAAACTTTTACCGCCCTCTGCAACAGAAATTCCCGATTCCGGGGATGACTGTATATGACGCGATACCGTGAGGCACCCCTGCCATTGGTGACATAGTAATCGGGGTGAGATGTGGAGATGCAAGCGATGTAACAACGGAATTGGTGCCCTACCACGAATACTGAATATTCACTGAATATTACTGAATATTCTTCGATTCCGGTGTCACTGAATATTCGACTGAATATTCTGAATATTCCATCCTAGAGACACCGATAGTATGTCCGGGCCAAAACTACTGAATATTCAATATTCAGTGGACCCGGTTAATAGTTATGCCGTATATATACTGAATATTCCTGAATATTCGGGCACTGTGTGTTTCAGCACTGAATACTGAATATTCCCGTATGATCGGGTACGAATACTGAATATTCCTGAACGGGAGCAACTGAATATTCCAATAGAACTAGACTGAATATTCGACTGAATATTCTGTACAGGCGCACTGAATATTCTAGAACTGGATTGATTACGATCATCCTGAAACGATTACGATCGAGATTACGATCAACGATCAGATCAGTTAAGGCACTGAATATTCACGGCACGATTACGATCATCGATTACGATCATCACTGAATAGATTACGATCACGCCATCCGGTCTAACGACATGTTACTCGGAACTGACGATTACGATCACCGAAATCAGGATTACGATCACACGGTCACTGAATAGATTACGATCAATTACGATGATTACGATCAAGATTACGATCGATTACGATCAACGATCATGTCGCGGTCGACCTCATAACTGTACCAGATTACGATCAGCTGATTACGATCAATCCGTCCAGATTACGATCATTACGATCATATAAGGCAATGAACACTATAGTGATTACGATCACGAACACATCTGATTACGATCATAAGAGGCCGACTTCTGATTACGATCACTGTTGAACGATTACGATGATTACGATCAGAAGGCAGTCCTATTGGATTACGATCACATACACGATTACGATCACAGTTGCCCCTGACCGAGGATTACGATCATAGCCAGGCGATTACGATCAATTACGATCATCTCCAACATGCTAGATTCAGCTTAGCAAG'
    # k = 11
    # l = 535
    # t = 18
    # text = 'CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA'
    # k = 5
    # l = 50
    # t = 4
    # with open('E_coli.txt','r') as fileEcoli:
    #     text = fileEcoli.read()
    # k = 9
    # l = 500
    # t = 3
    # print(bio.findClumpsCount(text,k,l,t))
    # print(bio.patternToNumber("agt"))
    # print(bio.numberToPattern(11,3))
    # Exercise 1  PatternCount
    text ="GCGCG"
    pattern = "GCG"
    print(bio.patternCount(text, pattern))
    # Exercise 2 BetterFrequentWords
    text = "ACGTTGCATGTCGCATGATGCATGAGAGCT"
    k =4
    print(bio.BetterFrequentWords(text,k))

if __name__ == "__main__":
    main()